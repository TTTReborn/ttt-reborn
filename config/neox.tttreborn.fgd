
@BaseClass = BaseProperties_neox_tttreborn
[
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	parentAttachmentName(parentAttachment) [ group="Hierarchy" ] : "Parent Model Bone/Attachment Name" : : "The name of the bone or attachment to attach to on the entity's parent in the movement hierarchy. Use !bonemerge to use bone-merge style attachment."

	useLocalOffset(boolean) [ group="Hierarchy" ] : "Use Model Attachment offsets" : 0 : "Whether to respect the specified local offset when doing the initial hierarchical attachment to its parent."
	local.origin(vector) [ group="Hierarchy" ] : "Model Attachment position offset" : : "Offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.angles(angle) [ group="Hierarchy" ] : "Model Attachment angular offset" : : "Angular offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.scales(vector) [ group="Hierarchy" ] : "Model Attachment scale" : : "Scale in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."

	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	tags(tags) : "Tags" : "" : "A list of general purpose tags for this entity, for interactions with other entities such as triggers."
]

//
// TTTReborn.Map.CreditAdjust
//
@PointClass base(BaseProperties_neox_tttreborn) = ttt_credit_adjust : "Changes the amount of credits upon the activator."
[
	credits(integer) : "Credits" : 1 : "Amount of credits to remove from activator. Negative numbers add credits. Removes 1 credit by default."

	input ExchangeCredits(void) : ""

	output OnSuccess(void) : "Fires when credits are successfully added or removed from activator."
	output OnFailure(void) : "Fires if credits cannot be removed or added to activator. Such as not having enough credits for removal as a player cannot have 'negative' credits."
]

//
// TTTReborn.Map.FeedEntry
//
@PointClass base(BaseProperties_neox_tttreborn) = ttt_feed_entry : "Add text entry to the game feed when input fired."
[
	message(string) : "Message" : "" : ""
	receiver(choices) : "Receiver" : 1 : "Who will this message go to? If using a custom team, choose `Other` and set the `Receiver Team Override` to the name of your team." =
	[
		0 : "All"
		1 : "Activator"
		2 : "Innocents"
		3 : "Traitors"
		4 : "Other"
	]
	text_color(color255) : "Color" :  : ""
	receiver_team_override(string) : "Receiver Team Override" : "Override Team Name" : ""

	input DisplayMessage(void) : ""
]

//
// TTTReborn.Map.ForceWin
//
@PointClass base(BaseProperties_neox_tttreborn) = ttt_force_win : "Forces round to end and win be awarded to team depending on input."
[
	team(string) : "Team" :  : "The name of the team that will be forced to win. This entity also contains built in inputs for certain teams. Use this for setting win conditions for custom teams."
	use_activators_team(boolean) : "Use Activators Team" : 0 : "OVERRIDES `Team` PROPERTY. When ForceWin() is fired, this will award a win to the team of the activating player."

	input InnocentsWin(void) : ""
	input TraitorsWin(void) : ""
	input Force(void) : ""
]

//
// TTTReborn.Map.LogicAssigned
//
@PointClass base(BaseProperties_neox_tttreborn) = ttt_logic_assigned : "Used to test the assigned team or role of the activator."
[
	check_value(string) : "Check Value" :  : "Note that teams are often plural. For example, check the `Role` for `ttt_role_traitor`, but check the `Team` for `ttt_team_traitors`."

	input Activate(void) : ""

	output OnPass(void) : "Fires if activator's check type matches the check value. Remember that outputs are reversed. If a player's role/team is equal to the check value, the entity will trigger OnPass()."
	output OnFail(void) : "Fires if activator's check type does not match the check value. Remember that outputs are reversed. If a player's role/team is equal to the check value, the entity will trigger OnPass()."
]

//
// TTTReborn.Map.RoleDoorEntity
//
@PointClass base(BaseProperties_neox_tttreborn) tags( SupportsSolids, Dynamic ) model() doorhelper( "movedir", "movedir_islocal", "movedir_type", "distance" ) 
metadata
{
	model_archetypes = [ "animated_model" ]
}
= ttt_logic_doorentity : "Used to assign team or role to a door."
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	check_value(string) : "Check Value" :  : "Note that teams are often plural. For example, check the `Role` for `ttt_role_traitor`, but check the `Team` for `ttt_team_traitors`."
	spawnsettings(flags) : "Spawn Settings" : : "Settings that are only applicable when the entity spawns" =
	[
		1 : "Use Opens" : 1
		2 : "Start Locked" : 0
	]
	movedir(angle) : "Move Direction (Pitch Yaw Roll)" : "0 0 0" : "The direction the door will move, when it opens."
	movedir_islocal(boolean) : "Move Direction is Expressed in Local Space" : 1 : "If checked, the movement direction angle is in local space and should be rotated by the entity's angles after spawning."
	movedir_type(choices) : "Movement Type" : 0 : "Movement type of the door." =
	[
		0 : "Moving"
		1 : "Rotating"
		2 : "Animating Only"
	]
	distance(float) : "Distance" : 0 : "Moving door: The amount, in inches, of the door to leave sticking out of the wall it recedes into when pressed. Negative values make the door recede even further into the wall. Rotating door: The amount, in degrees, that the door should rotate when it's pressed."
	initial_position(float) { group = "Spawn Settings" min = 0 max = 100 } : "Initial Position" : 0 : "How far the door should be open on spawn where 0% = closed and 100% = fully open."
	open_away(boolean) { group = "Spawn Settings" } : "Open Away From Player" : 0 : "If checked, rotating doors will try to open away from the activator"
	speed(float) : "Speed" : 100 : "The speed at which the door moves."
	close_delay(float) : "Auto Close Delay (-1 stay)" : 4 : "Amount of time, in seconds, after the door has opened before it closes automatically. If the value is set to -1, the door never closes itself."
	other_doors_to_open(target_destination) : "Other Doors To Open" : "" : "If set, opening this door will open all doors with given entity name. You can also simply name all doors the same for this to work."
	breakable(boolean) : "Breakable" : 0 : "If the door model supports break pieces and has prop_data with health, this option can be used to allow the door to break like a normal prop would."
	open_sound(sound) { group = "Sounds" } : "Start Opening Sound" : "" : "Sound to play when the door starts to open."
	fully_open_sound(sound) { group = "Sounds" } : "Fully Open Sound" : "" : "Sound to play when the door reaches it's fully open position."
	close_sound(sound) { group = "Sounds" } : "Start Closing Sound" : "" : "Sound to play when the door starts to close."
	fully_closed_sound(sound) { group = "Sounds" } : "Fully Closed Sound" : "" : "Sound to play when the door reaches it's fully closed position."
	locked_sound(sound) { group = "Sounds" } : "Locked Sound" : "" : "Sound to play when the door is attempted to be opened, but is locked."
	moving_sound(sound) { group = "Sounds" } : "Moving Sound" : "" : "Sound to play while the door is moving. Typically this should be looping or very long."
	open_ease(curve) : "Ease Function" :  : "Used to override the open/close animation of moving and rotating doors. X axis (input, left to right) is the animation, Y axis (output, bottom to top) is how open the door is at that point in the animation."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Activate(void) : ""
	input Break(void) : "Causes this prop to break, regardless if it is actually breakable or not. (i.e. ignores health and whether the model has gibs)"
	input Toggle(void) : "Toggle the open state of the door. Obeys locked state."
	input Open(void) : "Open the door. Obeys locked state."
	input Close(void) : "Close the door. Obeys locked state."
	input Lock(void) : "Locks the door so it cannot be opened or closed."
	input Unlock(void) : "Unlocks the door."
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnPass(void) : "Fires if activator's check type matches the check value. Remember that outputs are reversed. If a player's role/team is equal to the check value, the entity will trigger OnPass()."
	output OnFail(void) : "Fires if activator's check type does not match the check value. Remember that outputs are reversed. If a player's role/team is equal to the check value, the entity will trigger OnPass()."
	output OnLockedUse(void) : "Fired when a player tries to open/close this door with +use, but it's locked"
	output OnDamaged(void) : "Fired when the entity gets damaged, even if it is unbreakable."
	output OnBreak(void) : "Fired when the entity gets destroyed."
	output OnOpen(void) : "Fired when the door starts to open. This can be called multiple times during a single \"door opening\""
	output OnClose(void) : "Fired when the door starts to close. This can be called multiple times during a single \"door closing\""
	output OnFullyOpen(void) : "Called when the door fully opens."
	output OnFullyClosed(void) : "Called when the door fully closes."
]

//
// TTTReborn.Map.MapSettings
//
@PointClass base(BaseProperties_neox_tttreborn) = ttt_map_settings : ""
[

	output SettingsSpawned(void) : "Fired after PostLevelLoaded runs and MapSettings entity is found."
	output RoundPreparation(void) : "Fired once Preround begins."
	output RoundStart(void) : "Fired once round starts and roles are assigned."
	output RoundEnd(void) : "Fired once a win condition is met."
]

//
// TTTReborn.Map.LogicButton
//
@PointClass base(BaseProperties_neox_tttreborn) = ttt_logic_button : "Used to provide an onscreen button for a team or special role to activate."
[
	check_value(string) : "Check Value" :  : "Note that teams are often plural. For example, check the `Team` for `ttt_team_traitors`, but check the `Role` for `ttt_role_traitor`. It's recommended to use teams instead of roles in order to support upcoming roles of the same team."
	description(string) : "On screen tooltip shown on button" :  : "Leave empty if you want to display a hand pointer instead of a text button"
	range(integer) : "Range" : 1024 : "Maximum range a player can see and activate a button. Buttons are fully opaque within 512 uniques."
	delay(integer) : "Delay" : 1 : "Delay in seconds until button will reactive once triggered. Hammer doesn't like using decimal values, so this only takes integers."
	remove_on_press(boolean) : "Remove On Press" : 0 : "Only allows button to be pressed once per round."
	locked(boolean) : "Locked" : 0 : "Is the button locked? If enabled, button needs to be unlocked with the `Unlock` or `Toggle` input."

	input Press(void) : ""
	input Lock(void) : ""
	input Unlock(void) : ""
	input Toggle(void) : ""

	output OnPressed(void) : ""
]

//
// TTTReborn.Items.AmmoRandom
//
@PointClass base(BaseProperties_neox_tttreborn) = ttt_ammo_random : ""
[
	category(choices) { nullable = true } : "Spawn ammo of a specific weapon category" :  : "Spawn weapons of a specific category."
]

//
// TTTReborn.Items.OffensiveEquipmentAmmo
//
@PointClass base(BaseProperties_neox_tttreborn) tags( Physics ) editormodel( "models/ammo/ammo_9mm.vmdl" ) model() = ttt_ammo_offensive : ""
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	collisiongroupoverride(choices) : "Collision Group Override" : -1 : "" =
	[
		-1 : "UNUSED"
		0 : "COLLISION GROUP ALWAYS"
		1 : "COLLISION GROUP NONPHYSICAL"
		4 : "COLLISION GROUP DEFAULT"
		5 : "COLLISION GROUP DEBRIS"
		14 : "COLLISION GROUP WEAPON"
	]
	static(boolean) : "Static" : 0 : "If set, the prop will spawn with motion disabled and will act as a nav blocker until broken."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Break(void) : "Causes this prop to break, regardless if it is actually breakable or not. (i.e. ignores health and whether the model has gibs)"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnPickup(void) : "Fired when a player picks up any amount of ammo from the entity."
	output OnDamaged(void) : "Fired when the entity gets damaged."
	output OnBreak(void) : "Fired when the entity gets destroyed."
]

//
// TTTReborn.Items.PistolAmmo
//
@PointClass base(BaseProperties_neox_tttreborn) tags( Physics ) editormodel( "models/ammo/ammo_9mm.vmdl" ) model() = ttt_ammo_pistol : ""
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	collisiongroupoverride(choices) : "Collision Group Override" : -1 : "" =
	[
		-1 : "UNUSED"
		0 : "COLLISION GROUP ALWAYS"
		1 : "COLLISION GROUP NONPHYSICAL"
		4 : "COLLISION GROUP DEFAULT"
		5 : "COLLISION GROUP DEBRIS"
		14 : "COLLISION GROUP WEAPON"
	]
	static(boolean) : "Static" : 0 : "If set, the prop will spawn with motion disabled and will act as a nav blocker until broken."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Break(void) : "Causes this prop to break, regardless if it is actually breakable or not. (i.e. ignores health and whether the model has gibs)"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnPickup(void) : "Fired when a player picks up any amount of ammo from the entity."
	output OnDamaged(void) : "Fired when the entity gets damaged."
	output OnBreak(void) : "Fired when the entity gets destroyed."
]

//
// TTTReborn.Items.ShotgunAmmo
//
@PointClass base(BaseProperties_neox_tttreborn) tags( Physics ) editormodel( "models/ammo/ammo_buckshot.vmdl" ) model() = ttt_ammo_shotgun : ""
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	collisiongroupoverride(choices) : "Collision Group Override" : -1 : "" =
	[
		-1 : "UNUSED"
		0 : "COLLISION GROUP ALWAYS"
		1 : "COLLISION GROUP NONPHYSICAL"
		4 : "COLLISION GROUP DEFAULT"
		5 : "COLLISION GROUP DEBRIS"
		14 : "COLLISION GROUP WEAPON"
	]
	static(boolean) : "Static" : 0 : "If set, the prop will spawn with motion disabled and will act as a nav blocker until broken."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Break(void) : "Causes this prop to break, regardless if it is actually breakable or not. (i.e. ignores health and whether the model has gibs)"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnPickup(void) : "Fired when a player picks up any amount of ammo from the entity."
	output OnDamaged(void) : "Fired when the entity gets damaged."
	output OnBreak(void) : "Fired when the entity gets destroyed."
]

//
// TTTReborn.Items.SMGAmmo
//
@PointClass base(BaseProperties_neox_tttreborn) tags( Physics ) editormodel( "models/ammo/ammo_smg.vmdl" ) model() = ttt_ammo_smg : ""
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	collisiongroupoverride(choices) : "Collision Group Override" : -1 : "" =
	[
		-1 : "UNUSED"
		0 : "COLLISION GROUP ALWAYS"
		1 : "COLLISION GROUP NONPHYSICAL"
		4 : "COLLISION GROUP DEFAULT"
		5 : "COLLISION GROUP DEBRIS"
		14 : "COLLISION GROUP WEAPON"
	]
	static(boolean) : "Static" : 0 : "If set, the prop will spawn with motion disabled and will act as a nav blocker until broken."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Break(void) : "Causes this prop to break, regardless if it is actually breakable or not. (i.e. ignores health and whether the model has gibs)"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnPickup(void) : "Fired when a player picks up any amount of ammo from the entity."
	output OnDamaged(void) : "Fired when the entity gets damaged."
	output OnBreak(void) : "Fired when the entity gets destroyed."
]

//
// TTTReborn.Items.SniperAmmo
//
@PointClass base(BaseProperties_neox_tttreborn) tags( Physics ) editormodel( "models/ammo/ammo_9mm.vmdl" ) model() = ttt_ammo_sniper : ""
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	collisiongroupoverride(choices) : "Collision Group Override" : -1 : "" =
	[
		-1 : "UNUSED"
		0 : "COLLISION GROUP ALWAYS"
		1 : "COLLISION GROUP NONPHYSICAL"
		4 : "COLLISION GROUP DEFAULT"
		5 : "COLLISION GROUP DEBRIS"
		14 : "COLLISION GROUP WEAPON"
	]
	static(boolean) : "Static" : 0 : "If set, the prop will spawn with motion disabled and will act as a nav blocker until broken."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Break(void) : "Causes this prop to break, regardless if it is actually breakable or not. (i.e. ignores health and whether the model has gibs)"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnPickup(void) : "Fired when a player picks up any amount of ammo from the entity."
	output OnDamaged(void) : "Fired when the entity gets damaged."
	output OnBreak(void) : "Fired when the entity gets destroyed."
]

//
// TTTReborn.Items.Knife
//
@PointClass base(BaseProperties_neox_tttreborn) editormodel( "weapons/rust_boneknife/rust_boneknife.vmdl" ) = ttt_weapon_knife : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// TTTReborn.Items.NewtonLauncher
//
@PointClass base(BaseProperties_neox_tttreborn) editormodel( "weapons/rust_pistol/rust_pistol.vmdl" ) = ttt_weapon_newtonlauncher : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// TTTReborn.Items.Pistol
//
@PointClass base(BaseProperties_neox_tttreborn) editormodel( "weapons/rust_pistol/rust_pistol.vmdl" ) = ttt_weapon_pistol : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// TTTReborn.Items.Shotgun
//
@PointClass base(BaseProperties_neox_tttreborn) editormodel( "weapons/rust_pumpshotgun/rust_pumpshotgun.vmdl" ) = ttt_weapon_shotgun : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// TTTReborn.Items.SMG
//
@PointClass base(BaseProperties_neox_tttreborn) editormodel( "weapons/rust_smg/rust_smg.vmdl" ) = ttt_weapon_smg : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// TTTReborn.Items.WeaponRandom
//
@PointClass base(BaseProperties_neox_tttreborn) = ttt_weapon_random : ""
[
	ammotospawn(integer) : "Amount of ammo" : 0 : "Defines the amount of matching ammo entities that should be spawned near the weapons."
	category(choices) { nullable = true } : "Spawn weapons of a specific category" :  : "Spawn weapons of a specific category."
]

//
// TTTReborn.Items.HealthstationEntity
//
@PointClass base(BaseProperties_neox_tttreborn) tags( Physics ) model() = ttt_entity_healthstation : ""
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	collisiongroupoverride(choices) : "Collision Group Override" : -1 : "" =
	[
		-1 : "UNUSED"
		0 : "COLLISION GROUP ALWAYS"
		1 : "COLLISION GROUP NONPHYSICAL"
		4 : "COLLISION GROUP DEFAULT"
		5 : "COLLISION GROUP DEBRIS"
		14 : "COLLISION GROUP WEAPON"
	]
	static(boolean) : "Static" : 0 : "If set, the prop will spawn with motion disabled and will act as a nav blocker until broken."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Break(void) : "Causes this prop to break, regardless if it is actually breakable or not. (i.e. ignores health and whether the model has gibs)"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnDamaged(void) : "Fired when the entity gets damaged."
	output OnBreak(void) : "Fired when the entity gets destroyed."
]

